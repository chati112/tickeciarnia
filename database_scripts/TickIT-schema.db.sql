BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS Comments (
    CommentID INTEGER PRIMARY KEY AUTOINCREMENT,
    TicketID INTEGER NOT NULL,
    UserID INTEGER NOT NULL,
    CommentText TEXT NOT NULL,
    CreatedDate TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (TicketID) REFERENCES Tickets(TicketID) ON DELETE CASCADE,
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Priorities (
    PriorityID INTEGER PRIMARY KEY AUTOINCREMENT,
    PriorityName TEXT UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS ReopenReasons (
    ReasonID INTEGER PRIMARY KEY AUTOINCREMENT,
    ReasonText TEXT NOT NULL UNIQUE
);
CREATE TABLE IF NOT EXISTS Statuses (
    StatusID INTEGER PRIMARY KEY AUTOINCREMENT,
    StatusName TEXT UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS Tickets (
    TicketID INTEGER PRIMARY KEY AUTOINCREMENT,
    Title TEXT NOT NULL,
    Description TEXT NOT NULL,
    UserID INTEGER NOT NULL,
    TechnicianID INTEGER NULL,
    StatusID INTEGER NOT NULL,
    PriorityID INTEGER NOT NULL,
    CreatedDate TEXT DEFAULT CURRENT_TIMESTAMP,
    ResolvedDate TEXT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (TechnicianID) REFERENCES Users(UserID) ON DELETE SET NULL,
    FOREIGN KEY (StatusID) REFERENCES Statuses(StatusID) ON DELETE CASCADE,
    FOREIGN KEY (PriorityID) REFERENCES Priorities(PriorityID) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS Users (
    UserID INTEGER PRIMARY KEY AUTOINCREMENT,
    Email TEXT UNIQUE NOT NULL,
    Phone TEXT NULL,
    Role TEXT CHECK (Role IN ('User', 'Technician', 'Admin')) NOT NULL,
    PasswordHash TEXT NOT NULL
, FirstName TEXT, LastName TEXT, IsPasswordChangeRequired INTEGER DEFAULT 0, IsInactive INTEGER DEFAULT 0);
COMMIT;
